component Postable(post arn.Postable, user *arn.User, includeReplies bool, showParent bool, highlightAuthorID string)
	.post.mountable(id=fmt.Sprintf("%s-%s", strings.ToLower(post.TypeName()), post.GetID()), data-pro=post.Creator().IsPro(), data-api=fmt.Sprintf("/api/%s/%s", strings.ToLower(post.TypeName()), post.GetID()))
		.post-parent
			.post-author
				Avatar(post.Creator())

			.post-content(data-highlight=post.Creator().ID == highlightAuthorID)
				.post-header
					.post-creator
						a(href=post.Creator().Link())= post.Creator().Nick

						if showParent
							if post.GetParentType() == "User"
								if post.GetParentID() != post.Creator().ID
									span  to 
									a(href=post.Parent().Link())= post.Parent().TitleByUser(user)
							else if post.GetParentType() != ""
								span  in 
								a(href=post.Parent().Link())= post.Parent().TitleByUser(user)
					
					if user == nil || user.ID == post.Creator().ID
						//- Don't display a like icon.
					else if post.LikedBy(user.ID)
						button.post-action.post-likes.tip.action(id="unlike-" + post.GetID(), aria-label="Unlike", data-action="unlike", data-trigger="click")
							RawIcon("heart")
					else
						button.post-action.post-likes.tip.action(id="like-" + post.GetID(), aria-label="Like", data-action="like", data-trigger="click")
							RawIcon("heart-o")

					if user != nil
						button.post-action.tip.action(data-post-id=post.GetID(), aria-label="Reply", data-action="reply", data-trigger="click")
							RawIcon("reply")

						if user.ID == post.Creator().ID
							button.post-action.tip.action(data-action="editPost", data-trigger="click", data-id=post.GetID(), aria-label="Edit")
								RawIcon("pencil")

					if post.TypeName() != "Thread"
						if user != nil && (user.Role == "admin" || user.Role == "editor")
							button.post-action.tip.action(data-action="deletePost", data-trigger="click", data-id=post.GetID(), aria-label="Delete")
								RawIcon("trash")
					
					a.post-action.tip(href=post.Link(), aria-label="Link")
						RawIcon("link")
					
					.post-date.utc-date(data-date=post.GetCreated())

				div(id="render-" + post.GetID())!= post.HTML()

				if user != nil && user.ID == post.Creator().ID
					.post-edit-interface
						if post.TypeName() == "Thread"
							input.post-title-input.hidden(id="title-" + post.GetID(), value=post.TitleByUser(user), type="text", placeholder="Thread title")
						
						textarea.post-text-input.hidden(id="source-" + post.GetID())= post.GetText()
						
						.buttons.hidden(id="edit-toolbar-" + post.GetID())
							a.button.post-save.action(data-action="savePost", data-trigger="click", data-id=post.GetID())
								Icon("save")
								span Save

							a.button.post-cancel-edit.action(data-action="editPost", data-trigger="click", data-id=post.GetID())
								Icon("close")
								span Cancel

		.replies(id="replies-" + post.GetID())
			if includeReplies
				each reply in post.Posts()
					Postable(reply, user, true, false, highlightAuthorID)
