component SoundTrackPage(track *arn.SoundTrack, relatedTracks []*arn.SoundTrack, user *arn.User)
	SoundTrackTabs(track, user)

	.soundtrack-page
		.soundtrack-main
			.soundtrack-header
				if user != nil && track.File != ""
					button.action.mountable(data-action="playAudio", data-trigger="click", data-audio-src="/audio/" + track.File, data-media-id=track.ID)
						RawIcon("play")

				if track.Title.ByUser(user) == ""
					h1.soundtrack-page-title.mountable untitled
				else
					h1.soundtrack-page-title.mountable= track.Title.ByUser(user)

			//- if user != nil
			//- 	.buttons.soundtrack-buttons
			//- 		LikeButton(strconv.Itoa(len(track.Likes)), "heart", "soundtrack", track, user)

			.soundtrack-section.mountable
				h3.soundtrack-section-name.widget-title Anime

				.soundtrack-anime-list
					each anime in track.Anime()
						AnimeCard(anime, fmt.Sprintf("%s %d", stringutils.Capitalize(anime.Season()), anime.StartDateTime().Year()), user)

			.soundtrack-section.soundtrack-tags.mountable
				h3.soundtrack-section-name.widget-title Tags

				.tags
					each tag in track.Tags
						a.tag(href="/soundtracks/tag/" + tag)= tag

			.soundtrack-section.soundtrack-comments.mountable
				h3.soundtrack-section-name.widget-title Comments
				Comments(track, user)
		
		.soundtrack-sidebar
			.soundtrack-section.mountable(data-mountable-type="sidebar")
				h3.soundtrack-section-name.widget-title Information

				table.soundtrack-details
					tr(data-mountable-type="info")
						td.soundtrack-details-name Created:
						td.soundtrack-details-value.utc-date(data-date=track.Created)

					if track.Edited != ""
						tr(data-mountable-type="info")
							td.soundtrack-details-name Edited:
							td.soundtrack-details-value.utc-date(data-date=track.Edited)
			
			.soundtrack-section.mountable(data-mountable-type="sidebar")
				h3.soundtrack-section-name.widget-title Media
				
				.soundtrack-media-list
					each media in track.Media
						.soundtrack-media.video-container
							iframe.lazy.video(data-src=media.EmbedLink(), title=media.Service + " media source", allowfullscreen)

			if len(relatedTracks) > 0
				.soundtrack-section.mountable(data-mountable-type="sidebar")
					h3.soundtrack-section-name.widget-title Related
					
					ul.related-tracks
						each relatedTrack in relatedTracks
							li(data-mountable-type="info")
								a(href=relatedTrack.Link())= relatedTrack.TitleByUser(user)
			
			if len(track.Links) > 0
				.soundtrack-section.mountable(data-mountable-type="sidebar")
					h3.soundtrack-section-name.widget-title Links

					.light-button-group
						each link in track.Links
							a.light-button(href=link.URL, target="_blank")
								Icon("external-link")
								span= link.Title

component SoundTrackTabs(track *arn.SoundTrack, user *arn.User)
	.tabs
		Tab("Soundtrack", "music", track.Link())

		if track.HasLyrics()
			Tab("Lyrics", "font", track.Link() + "/lyrics")

		if user != nil
			Tab("Edit", "pencil", track.Link() + "/edit")
		
		Tab("History", "history", track.Link() + "/history")
